// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum TermType {
  FIRST
  SECOND
  THIRD
}

model User {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  email        String?  @unique
  password     String?
  role         Role     @default(STUDENT)
  approved     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  isSuperAdmin Boolean  @default(false)
  Student      Student?
  Teacher      Teacher?
}

model Student {
  id         String       @id @default(cuid())
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender     Gender
  address    String
  classId    String?
  class      Class?       @relation(fields: [classId], references: [id], onDelete: SetNull)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Result     Result[]
  TermReport TermReport[]

  @@index([userId])
}

model Teacher {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender    Gender
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@index([userId])
}

model AcademicSession {
  id        String   @id @default(cuid())
  name      String
  startYear String
  endYear   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  terms     Term[]
  classes   Class[]
  Result    Result[]
}

model Term {
  id                String          @id @default(cuid())
  name              TermType
  academicSessionId String
  academicSession   AcademicSession @relation(fields: [academicSessionId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  Result            Result[]
  TermReport        TermReport[]

  @@unique([academicSessionId, name])
  @@index([academicSessionId])
}

model Class {
  id                String          @id @default(cuid())
  name              String
  academicSessionId String
  academicSession   AcademicSession @relation(fields: [academicSessionId], references: [id], onDelete: Cascade)
  teacherId         String?
  teacher           Teacher?        @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  students          Student[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  TermReport        TermReport[]
  Result            Result[]

  @@unique([academicSessionId, name])
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Result    Result[]
}

model Result {
  id                String          @id @default(cuid())
  studentId         String
  student           Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  termId            String
  term              Term            @relation(fields: [termId], references: [id], onDelete: Cascade)
  subjectId         String
  subject           Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  academicSessionId String
  academicSession   AcademicSession @relation(fields: [academicSessionId], references: [id], onDelete: NoAction)
  classId           String
  class             Class           @relation(fields: [classId], references: [id], onDelete: NoAction)
  score             Float
  grade             String
  teacherRemark     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, termId, subjectId])
}

model TermReport {
  id            String  @id @default(cuid())
  studentId     String
  student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  termId        String
  term          Term    @relation(fields: [termId], references: [id], onDelete: Cascade)
  classId       String
  class         Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  totalScore    Float
  averageScore  Float
  grade         String?
  teacherRemark String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, termId])
}
